/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.boxnet;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.log4j.Logger;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;

import cn.com.believer.songyuanframework.openapi.storage.box.BoxExternalAPI;
import cn.com.believer.songyuanframework.openapi.storage.box.constant.BoxConstant;
import cn.com.believer.songyuanframework.openapi.storage.box.factories.BoxRequestFactory;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.BoxResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.CreateFolderRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.CreateFolderResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.DeleteRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.DeleteResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.DownloadRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.DownloadResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetAccountTreeRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetAccountTreeResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetAuthTokenRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetAuthTokenResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetTicketRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetTicketResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.LogoutRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.LogoutResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.PublicShareRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.PublicShareResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.RegisterNewUserRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.RegisterNewUserResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.UploadRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.UploadResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.impl.simple.SimpleBoxImpl;
import cn.com.believer.songyuanframework.openapi.storage.box.objects.BoxException;

/**
 * Box.net Cloud Connector Module
 *
 * @author MuleSoft, Inc.
 * @author mariano.gonzalez@mulesoft.com
 */
@Module(name="boxnet", schemaVersion="1.0")
public class BoxNetModule {
    
private static final Logger logger = Logger.getLogger(BoxNetModule.class);
	
	private final BoxExternalAPI client = new SimpleBoxImpl();
	private static final String TARGET_FILE = "file";
	private static final String TARGET_FOLDER = "folder";
	
    /**
     * The API key obtained when registering a project with the Box platform.
     * For more information about this field please refer to {@link http://developers.box.net/}
     */
    @Configurable
    private String apiKey;
    
    
    /**
     * Get and access ticket using the configured apiKey.
     * With this ticket, the user needs to manually go to {@link https://www.box.net/api/1.0/auth/<ticket>}
     * 
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:getTicket}
     *
     * @return the ticket key
     */
    @Processor
    public String getTicket() {
    	
    	GetTicketResponse response = this.execute(new BoxClosure<GetTicketResponse>() {
    		
    		@Override
    		public GetTicketResponse execute() throws IOException, BoxException {
    			GetTicketRequest getTicketRequest = BoxRequestFactory.createGetTicketRequest(apiKey);
    			return client.getTicket(getTicketRequest);
    		}
		}, "getTicket");
    	
    	String ticket = response.getTicket();
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("Fetched ticket with apiKey " + this.apiKey + " and obtained: " + ticket);
    	}
    	
    	return ticket;
    }
    
    /**
     * Gets the authentication token for a particular ticket.
     * After the user manually logs into box.net using the ticket provided by
     * {@link org.mule.connector.boxnet.BoxNetModule.getTicket()}, one of two
     * things might happen depending on how the application is configured on box.net
     * side:
     * 
     * <ol>
	 *	<li>
	 *		You can configure box.net to make a callback returning the ticket and authToken, in which case you need to provide a http
	 *		inbound on your application (mule can help you do that but you're not forced to). For more information on this
	 *		option please look at {@link http://developers.box.net/w/page/12923915/ApiAuthentication}
	 *	</li>
	 *	<li>
	 *		You can use this processor to obtain the authentication token related to a certain ticket. You then need to store that token somehow
	 *		and use it in further processor operations. 
	 *  </li>
	 *	</ol>
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:getAuthToken}
     *
     * @param ticket the authentication ticket obtained with {@link org.mule.connector.boxnet.BoxNetModule.getTicket()}
     * @return the authentication token
     * @throws IllegalArgumentException if the ticket does not match a logged user
     */
    @Processor
    public String getAuthToken(final String ticket) {
    	GetAuthTokenResponse getAuthTokenResponse = this.execute(new BoxClosure<GetAuthTokenResponse>() {
    		
    		@Override
    		public GetAuthTokenResponse execute() throws IOException, BoxException {
    			GetAuthTokenRequest getAuthTokenRequest = BoxRequestFactory.createGetAuthTokenRequest(apiKey, ticket);
    			return client.getAuthToken(getAuthTokenRequest);
    		}
		}, "getAuthToken");
    	
         if (BoxConstant.STATUS_NOT_LOGGED_IN.equals(getAuthTokenResponse.getStatus())) {
             
        	 if (logger.isDebugEnabled()) {
            	 String msg = "Failed to obtain authToken using ticket " + ticket + ". Not logged in";
            	 logger.error(msg);
            	 throw new IllegalArgumentException(msg);
             }
         }
         
         String authToken = getAuthTokenResponse.getAuthToken();
         
         if (logger.isDebugEnabled()) {
        	 logger.debug("ticket " + ticket + "mapped to authToken: " + authToken);
         }
         
         return authToken;
    }
    

    /**
     * Create a new user in box.net
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:registerNewUser}
     *
     * @param email the user's email
     * @param password the user's password
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.RegisterNewUserResponse} with
     * 			data about the operation status and info about the newly created user (if successful)
     */
    @Processor
    public RegisterNewUserResponse registerNewUser(final String email, final String password) {
    	if (logger.isDebugEnabled()) {
    		logger.debug("about to create user with email: " + email + " and pass: " + password);
    	}
    	
    	return this.execute(new BoxClosure<RegisterNewUserResponse>() {
    		
    		@Override
    		public RegisterNewUserResponse execute() throws IOException, BoxException {
    			RegisterNewUserRequest registerNewUserRequest = BoxRequestFactory.createRegisterNewUserRequest(apiKey, email, password);
    			return client.registerNewUser(registerNewUserRequest);
    		}
		}, "registerNewUser");
    }
    
    /**
     * Create a new folder
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:createFolder}
     *
     * @param authToken the authentication token obtained with the ticket
     * @param parentFolderId the id of the parent folder
     * @param folderName the name of the folder you want to create
     * @param share specifies if the folder is shared. This parameter is optional and defaults to false
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.CreateFolderResponse} with
     * 			data about the operation status and info about the newly created folder (if successful)
     */
    @Processor
    public CreateFolderResponse createFolder(final String authToken,
    										final String parentFolderId,
    										final String folderName,
    										@Optional @Default("false") final Boolean share) {

    	if (logger.isDebugEnabled()) {
    		logger.debug("About to create folder: \n" +
    				"authToken: " + authToken +
    				"\nparentFolderId: " + parentFolderId +
    				"\nfolderName: " + folderName +
    				"\nshare: " + share);
    	}
    	
    	return this.execute(new BoxClosure<CreateFolderResponse>() {
    		
    		@Override
    		public CreateFolderResponse execute() throws IOException, BoxException {
    			CreateFolderRequest createFolderRequest =
    	    			BoxRequestFactory.createCreateFolderRequest(apiKey, authToken, parentFolderId, folderName, share);
    			
    			return client.createFolder(createFolderRequest);
    		}
		}, "create Folder");
    }
    
    /**
     * Receives a comma separated list of paths and uploads the corresponding
     * files.
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:uploadFiles}
     *
     * @param authToken the authentication token obtained with the ticket
     * @param folderId the id of the parent folder
     * @param csvPaths comma separated list of paths where the files are. Cannot be null or empty. Can we just want single comma-less file.
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.UploadResponse} with
     * 			data about the operation status and info about the newly uploaded files (if successful)
     */
    @Processor
    public UploadResponse uploadFiles(final String authToken, String csvPaths, final String folderId) {
    	if (StringUtils.isEmpty(csvPaths)) {
    		throw new IllegalArgumentException("you need to provide a path");
    	}
    	
    	final Map<String, File> files = new HashMap<String, File>();
    	
    	for (String path : csvPaths.split(",")) {
    		File file = new File(path);
    		
    		if (!file.exists()) {
    			throw new IllegalArgumentException("File " + path + " does not exist");
    		}
    		
    		files.put(file.getName(), file);
    	}
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("about to uploadFiles with parameters:\nauthToken: " + authToken +
    				"\ncsvPaths: " + csvPaths +
    				"\nfolderId: " + folderId
    				);
    	}
    	
    	return this.execute(new BoxClosure<UploadResponse>() {
    		
    		@Override
    		public UploadResponse execute() throws IOException, BoxException {
    			UploadRequest uploadRequest = BoxRequestFactory.createUploadRequest(authToken, true, folderId, files);
    			return client.upload(uploadRequest);
    		}
		}, "uploadFiles");
    }
    
    /**
     * Receives an input stream and uploads its content as a file
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:uploadStream}
     *
     * @param authToken the authentication token obtained with the ticket
     * @param folderId the id of the parent folder
     * @param filename the name we want the file to have on box.net
     * @param input InputStream with the contents of the file.
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.UploadResponse} with
     * 			data about the operation status and info about the newly uploaded file (if successful)
     */
    @Processor
    public UploadResponse uploadStream(final String authToken, final String folderId, final String filename, InputStream input) {
    	byte[] data = null;
    	
    	try {
    		data = IOUtils.toByteArray(input);
    	} catch (IOException e) {
    		throw new IllegalArgumentException("Failed to read input stream", e);
    	}
    	
    	final Map<String, byte[]> uploadData = new HashMap<String, byte[]>();
    	uploadData.put(filename, data);
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("about to uploadFile using stream with parameters:\nauthToken: " + authToken +
    				"\nfolderId: " + folderId
    				);
    	}
    	
    	return this.execute(new BoxClosure<UploadResponse>() {
    		
    		@Override
    		public UploadResponse execute() throws IOException, BoxException {
    			UploadRequest uploadRequest = BoxRequestFactory.createUploadRequest(authToken, false, folderId, uploadData);
    			return client.upload(uploadRequest);
    		}
		}, "uploadStream");
    	
    	
    }
    
    /**
     * Shares a file or folder
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:share}
     *
     * @param authToken the authentication token obtained with the ticket
     * @param target The type of item to be shared.  This can be set as 'file' or 'folder'. Any other value will throw a {@link IllegalArgumentException}
     * @param targetId The id of the item you wish to share.  If the target is a folder, this will be the folder_id.  If the target is a file, this will be the file_id.
     * @param password The password to protect the folder or file.
     * @param message An message to be included in a notification email.
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.PublicShareResponse} with
     * 			data about the operation status and info about the shared folder (if successful)
     * @throws {@link IllegalArgumentException} is target is invalid
     */
    @Processor
    public PublicShareResponse share(
									final String authToken,
									final String target,
									final String targetId,
									final String password,
									final String message) {
    	this.validateTarget(target);
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("about to share folder with params:\nauthToken: " + authToken +
    					"\ntarget: " + target +
    					"\ntargetId: " + targetId + 
    					"\npassword: " + password + 
    					"\nmessage: " + message);
    	}
    	return this.execute(new BoxClosure<PublicShareResponse>() {
    		
    		@Override
    		public PublicShareResponse execute() throws IOException, BoxException {
    			PublicShareRequest publicShareRequest = BoxRequestFactory.createPublicShareRequest(
    					apiKey,	authToken, target, targetId, password, message, null);
    			return client.publicShare(publicShareRequest);
    		}
		}, "share");
    }
    
    /**
     * gets a folder's tree structure
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:getTreeStructure}
     *
     * @param authToken the authentication token obtained with the ticket
     * @param folderId The ID of the root folder from which the tree begins.  If this value is "0", the user's full account tree is returned.
     * @param csvParams comma separated list of params. This is optional
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.GetAccountTreeResponse} with
     * 			data about the operation status and info about the inspected folder (if successful)
     */
    @Processor
    public GetAccountTreeResponse getTreeStructure(final String authToken, final String folderId, @Optional final String csvParams) {
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("fetching tree structure with params:\nauthToken: " + authToken +
    					"\nfolderId: " + folderId + 
    					"\ncsvParams: " + csvParams);
    	}
    	
    	final String[] params = StringUtils.isEmpty(csvParams) ? null : csvParams.split(",");
    	
    	return this.execute(new BoxClosure<GetAccountTreeResponse>() {
    		
    		@Override
    		public GetAccountTreeResponse execute() throws IOException,	BoxException {
    			GetAccountTreeRequest getAccountTreeRequest = BoxRequestFactory.createGetAccountTreeRequest(
    					apiKey, authToken, folderId, params);
    			return client.getAccountTree(getAccountTreeRequest);
    		}
		}, "getTreeStructure");
    }
    
    
    /**
     * Downloads a file an returns its contents as a byte[] 
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:download}
     *
     * @param authToken the authentication token obtained with the ticket
     * @param fileId the id of the file we want to download
     * @return the file's contents as a byte array
     */
    @Processor
    public byte[] download(final String authToken, final String fileId) {
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("About to download file with id: " + fileId);
    	}
    	
    	DownloadResponse response = this.execute(new BoxClosure<DownloadResponse>() {
    		
    		@Override
    		public DownloadResponse execute() throws IOException, BoxException {
    			DownloadRequest downloadRequest = BoxRequestFactory.createDownloadRequest(authToken, fileId, false, null);
    			return client.download(downloadRequest);
    		}
    		
		}, "download");
    	
    	return response.getRawData();
    }
    
    /**
     * Deletes a file or folder
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:delete}
     *
     * @param authToken the authentication token obtained with the ticket
     * @param target The type of item to be shared.  This can be set as 'file' or 'folder'. Any other value will throw a {@link IllegalArgumentException}
     * @param targetId The id of the item you wish to delete. If the target is a folder, this will be the folder_id.  If the target is a file, this will be the file_id.
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.DeleteResponse} with data about the operation status
     * @throws {@link IllegalArgumentException} is target is invalid
     */
    @Processor
    public DeleteResponse delete(final String authToken, final String target, final String targetId) {
    	this.validateTarget(target);
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("about to delete with params:\ntarget: " + target +
    					"\ntargetId: " + targetId);
    	}
    	
    	return this.execute(new BoxClosure<DeleteResponse>() {
    		
    		@Override
    		public DeleteResponse execute() throws IOException, BoxException {
    			DeleteRequest deleteRequest = BoxRequestFactory.createDeleteRequest(apiKey, authToken, target, targetId);
    			return client.delete(deleteRequest);
    		}
		}, "delete");
    }
    
    
    /**
     * Logs out the user associated with the authorization token
     *
     * {@sample.xml ../../../doc/BoxNet-connector.xml.sample boxnet:logout}
     *
     * @param authToken the authentication token obtained with the ticket
     * @return and instance of {@link cn.com.believer.songyuanframework.openapi.storage.box.functions.LogoutResponse} with data about the operation status
     */
    @Processor
    public LogoutResponse logout(final String authToken) {
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug("logging off authToken: " + authToken);
    	}
    	
    	return this.execute(new BoxClosure<LogoutResponse>() {
    		
    		@Override
    		public LogoutResponse execute() throws IOException, BoxException {
    			LogoutRequest logoutRequest = BoxRequestFactory.createLogoutRequest(apiKey, authToken);
    			return client.logout(logoutRequest);
    		}
		}, "logout");
    }
    	
    
    // internals
    
    private void validateTarget(String target) {
    	if (!(TARGET_FILE.equals(target) || TARGET_FOLDER.equals(target))) {
    		throw new IllegalArgumentException("invalid target argument was provided. Valid values are " + TARGET_FILE + " and " + TARGET_FOLDER);
    	}
    }
    
    private interface BoxClosure<T extends BoxResponse> {
    	
    	public T execute() throws IOException, BoxException;
    }
    
    private <T extends BoxResponse> T execute(BoxClosure<T> closure, String operationName) {
    	
    	T response = null;
    	try {
    		response = closure.execute();
    		if (logger.isDebugEnabled()) {
    			logger.debug(operationName + " executed with return status: "
    					+ response.getStatus() + " and values:\n" + 
    					ToStringBuilder.reflectionToString(response));
    		}
    	} catch (IOException e) {
    		this.logAndThrow(e);
    	} catch (BoxException e) {
    		this.logAndThrow(e);
    	}
    	
    	return response;
    }
    
    private void logAndThrow(Exception e) {
    	final String msg = "exception caught on Box.net Cloud Connector";
    	if (logger.isDebugEnabled()) {
    		logger.error(msg, e);
    	}
    	
    	throw new RuntimeException(e);
    }
    
	public void setApiKey(String apiKey) {
		this.apiKey = apiKey;
	}
}
